
plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
}

if (project.hasProperty('targetProps')) {
    def propsFile = file("gradle-${project.property('targetProps')}.properties")
    if (propsFile.exists()) {
        println "Loading properties from ${propsFile}"
        def props = new Properties()
        propsFile.withInputStream { props.load(it) }
        props.each { k, v -> project.ext."${k}" = v }
    } else {
        println "targetProps set but ${propsFile} not found"
    }
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    //Cloth Config
    maven { url "https://maven.shedaniel.me/" }
    //ModMenu
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    //Toml
    modImplementation("com.moandjiezana.toml:toml4j:${project.toml4j_version}")
    include "com.moandjiezana.toml:toml4j:${project.toml4j_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    // produce distinct artifact filename per build (includes mod version + mc version)
    archiveFileName = "${project.base.archivesName}-${project.version}.jar"
    inputs.property "archivesName", project.base.archivesName

    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
     
    // --- Keep remapped artifacts per-minecraft-version to avoid overwriting when running clean ---
    // Copy the remapped jar to a per-version folder after remapJar runs.
    tasks.register('copyRemappedJar', Copy) {
        // remapJar is provided by Fabric Loom; run it first
        dependsOn 'remapJar'
        // remapJar produces an archiveFile provider
        from { tasks.named('remapJar').get().archiveFile }
        into { file("build/archives/${project.minecraft_version}") }
        doLast {
            println "Archived remapped jar to build/archives/${project.minecraft_version}"
        }
    }
     
    // Convenience task: remap then archive (use instead of running clean/remapJar when producing many versions)
    tasks.register('remapAndArchive') {
        dependsOn 'remapJar', 'copyRemappedJar'
        doLast {
            println "remapAndArchive completed for ${project.minecraft_version}"
        }
    }
}